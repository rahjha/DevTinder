1. There can be more than one route handlers for one route, there are three parameters accepted to the router handler function-req, res, next.
and if you call next() function then next route handler is executed, otherwise it is not executed.
e.g. app.use("/user",(req,res,next)=>{
    console.log("Handling the route user!!");
    res.send("1st Response");
    next();
},(req, res)=>{
    console.log("Handling the route user 2!!");
    res.send("2nd Response);
})

But the question is that why is this pattern of multiple route handlers needed, infact it is called middleware
consider a scenario : admin is trying to getAllData or deleteAllData, then before this data is fetched or deleted, we need to validate
if the admin is authorized or not to perform this activity.
In this case, we can write a middleware/route handler which will check the authorization of all the api calls of /admin, and returns
error from there itself in case of admin is not authorized, otherwise sends the next api request to getAllData or deleteAllData.

2. How error handling is done in api route handling?

-Error-Handling Middleware

Error-handling middleware in Express is identified by having four arguments: (err, req, res, next).
It must be defined after all route handlers and other middleware.

-How Errors Are Passed

To trigger the error-handling middleware, you pass an error object to next() or throw an error in an asynchronous function.

use try catch to write any error prone code and call next inside the catch block and this next call will call the error handling 
middleware with arguments (err, req, res, next)

3.How express.json() Works
When a client sends a POST, PUT, or PATCH request with a JSON payload, express.json():
    a. Reads the incoming JSON data in the request body.
    b. Converts the JSON data into a JavaScript object.
    c. Attaches the parsed object to the req.body property for easier access in your application.

express.json() is a built-in middleware function in Express.js that parses incoming requests with JSON payloads. 
It is used to process and transform the raw application/json data in the request body into a JavaScript object,
making it accessible via req.body.

